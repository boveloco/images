name: Docker Build and Push to GHCR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Grant GITHUB_TOKEN write permission to packages
permissions:
  contents: read
  packages: write

jobs:
  # This job finds all the Dockerfiles and passes them to the next job via a matrix
  get-files:
    runs-on: ubuntu-latest
    outputs:
      # This is a JSON string of all Dockerfile paths
      dockerfiles: ${{ steps.find-dockerfiles.outputs.files }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Find all Dockerfiles
        id: find-dockerfiles
        # The 'find' command outputs a list of paths separated by spaces, which we format as a JSON array
        run: |
          # Use a variable to handle a potential lack of files gracefully
          files=$(find images/ -type f -name '*.dockerfile' || true)
          if [ -z "$files" ]; then
            echo "No Dockerfiles found in 'images/' directory. Setting empty matrix."
            echo "files=[]" >> $GITHUB_OUTPUT
          else
            # Now format the list into a JSON array
            json_array=$(echo "$files" | jq -R . | jq -cs .)
            echo "files=$json_array" >> $GITHUB_OUTPUT
          fi

  # This job runs a separate instance for each Dockerfile found in the 'get-files' job
  build-and-push-images:
    runs-on: ubuntu-latest
    needs: get-files
    strategy:
      fail-fast: false
      matrix:
        # The matrix is created from the JSON output of the 'get-files' job
        dockerfile: ${{ fromJson(needs.get-files.outputs.dockerfiles) }}

    env:
      REGISTRY: ghcr.io
      # Use the owner/repo for the registry path
      OWNER: ${{ github.repository_owner }}
      REPOSITORY: ${{ github.repository }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        # This is essential for building multi-architecture images on an amd64 runner
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        # This provides access to advanced features for multi-platform builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        # Use the GITHUB_TOKEN to authenticate to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image for ${{ matrix.dockerfile }}
        run: |
          # The matrix variable holds the current Dockerfile path
          DOCKERFILE="${{ matrix.dockerfile }}"
          
          # The image name is now derived directly from the filename, excluding the extension.
          # For a path like 'images/alpine/test.dockerfile', this gets 'test'
          IMAGE_NAME=$(basename "$DOCKERFILE" .dockerfile)
          
          # The full image name for GitHub Packages includes the owner and repo
          IMAGE_PATH="${{ env.REGISTRY }}/${{ github.repository }}/${IMAGE_NAME}"
          
          # The name needs to be lowercase for GHCR
          IMAGE_PATH_LOWERCASE=$(echo "$IMAGE_PATH" | tr '[:upper:]' '[:lower:]')
          
          echo "Building and pushing multi-architecture image for $IMAGE_NAME to GHCR"
          
          # The build command now includes the platforms input for multi-arch builds
          docker buildx build --push \
            --file "$DOCKERFILE" \
            --tag "$IMAGE_PATH_LOWERCASE:latest" \
            --tag "$IMAGE_PATH_LOWERCASE:sha-${GITHUB_SHA::7}" \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --platform linux/amd64,linux/arm64 \
            "$(dirname "$DOCKERFILE")"
